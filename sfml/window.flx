class SFML_Window {
    private header window_hpp = '#include <SFML/Window.hpp>' requires
        package 'sfml-window', body '''
        typedef sf::Window flx_sfml_window;
        FLX_FINALISER(flx_sfml_window)
        ''';


    type VideoMode = 'sf::VideoMode' requires window_hpp;
    ctor VideoMode: uint * uint * uint = 'VideoMode($1, $2, $3)';
    ctor VideoMode: uint * uint = 'sf::VideoMode($1, $2)';
    fun is_valid: VideoMode -> bool = '$1.isvalid()';
    lvalue fun width: VideoMode -> uint = '$1.width';
    lvalue fun height: VideoMode -> uint = '$1.height';
    lvalue fun bits_per_pixel: VideoMode -> uint = '$1.bitsPerPixel';

    instance Str[VideoMode] {
        fun str(v: VideoMode) =>
            f"VideoMode (width=%u, height=%u)" (v.width, v.height);
    }

    gen desktop_mode: 1 -> VideoMode = 'sf::VideoMode::getDesktopMode()';


    type Key = 'sf::Keyboard::Key';
    ctor int: Key = 'static_cast<int>($1)';
    fun ==: Key * Key -> bool = '$1 == $2';
    fun !=: Key * Key -> bool = '$1 != $2';
    class KeyCodes {
        const Unknown: Key = 'sf::Keyboard::Key::Unknown';
        const A: Key = 'sf::Keyboard::Key::A';
        const B: Key = 'sf::Keyboard::Key::B';
        const C: Key = 'sf::Keyboard::Key::C';
        const D: Key = 'sf::Keyboard::Key::D';
        const E: Key = 'sf::Keyboard::Key::E';
        const F: Key = 'sf::Keyboard::Key::F';
        const G: Key = 'sf::Keyboard::Key::G';
        const H: Key = 'sf::Keyboard::Key::H';
        const I: Key = 'sf::Keyboard::Key::I';
        const J: Key = 'sf::Keyboard::Key::J';
        const K: Key = 'sf::Keyboard::Key::K';
        const L: Key = 'sf::Keyboard::Key::L';
        const M: Key = 'sf::Keyboard::Key::M';
        const N: Key = 'sf::Keyboard::Key::N';
        const O: Key = 'sf::Keyboard::Key::O';
        const P: Key = 'sf::Keyboard::Key::P';
        const Q: Key = 'sf::Keyboard::Key::Q';
        const R: Key = 'sf::Keyboard::Key::R';
        const S: Key = 'sf::Keyboard::Key::S';
        const T: Key = 'sf::Keyboard::Key::T';
        const U: Key = 'sf::Keyboard::Key::U';
        const V: Key = 'sf::Keyboard::Key::V';
        const W: Key = 'sf::Keyboard::Key::W';
        const X: Key = 'sf::Keyboard::Key::X';
        const Y: Key = 'sf::Keyboard::Key::Y';
        const Z: Key = 'sf::Keyboard::Key::Z';
        const Num0: Key = 'sf::Keyboard::Key::Num0';
        const Num1: Key = 'sf::Keyboard::Key::Num1';
        const Num2: Key = 'sf::Keyboard::Key::Num2';
        const Num3: Key = 'sf::Keyboard::Key::Num3';
        const Num4: Key = 'sf::Keyboard::Key::Num4';
        const Num5: Key = 'sf::Keyboard::Key::Num5';
        const Num6: Key = 'sf::Keyboard::Key::Num6';
        const Num7: Key = 'sf::Keyboard::Key::Num7';
        const Num8: Key = 'sf::Keyboard::Key::Num8';
        const Num9: Key = 'sf::Keyboard::Key::Num9';
        const Escape: Key = 'sf::Keyboard::Key::Escape';
        const LControl: Key = 'sf::Keyboard::Key::LControl';
        const LShift: Key = 'sf::Keyboard::Key::LShift';
        const LAlt: Key = 'sf::Keyboard::Key::LAlt';
        const LSystem: Key = 'sf::Keyboard::Key::LSystem';
        const RControl: Key = 'sf::Keyboard::Key::RControl';
        const RShift: Key = 'sf::Keyboard::Key::RShift';
        const RAlt: Key = 'sf::Keyboard::Key::RAlt';
        const RSystem: Key = 'sf::Keyboard::Key::RSystem';
        const Menu: Key = 'sf::Keyboard::Key::Menu';
        const LBracket: Key = 'sf::Keyboard::Key::LBracket';
        const RBracket: Key = 'sf::Keyboard::Key::RBracket';
        const SemiColon: Key = 'sf::Keyboard::Key::SemiColon';
        const Comma: Key = 'sf::Keyboard::Key::Comma';
        const Period: Key = 'sf::Keyboard::Key::Period';
        const Quote: Key = 'sf::Keyboard::Key::Quote';
        const Slash: Key = 'sf::Keyboard::Key::Slash';
        const BackSlash: Key = 'sf::Keyboard::Key::BackSlash';
        const Tilde: Key = 'sf::Keyboard::Key::Tilde';
        const Equal: Key = 'sf::Keyboard::Key::Equal';
        const Dash: Key = 'sf::Keyboard::Key::Dash';
        const Space: Key = 'sf::Keyboard::Key::Space';
        const Return: Key = 'sf::Keyboard::Key::Return';
        const BackSpace: Key = 'sf::Keyboard::Key::BackSpace';
        const Tab: Key = 'sf::Keyboard::Key::Tab';
        const PageUp: Key = 'sf::Keyboard::Key::PageUp';
        const PageDown: Key = 'sf::Keyboard::Key::PageDown';
        const End: Key = 'sf::Keyboard::Key::End';
        const Home: Key = 'sf::Keyboard::Key::Home';
        const Insert: Key = 'sf::Keyboard::Key::Insert';
        const Delete: Key = 'sf::Keyboard::Key::Delete';
        const Add: Key = 'sf::Keyboard::Key::Add';
        const Subtract: Key = 'sf::Keyboard::Key::Subtract';
        const Multiply: Key = 'sf::Keyboard::Key::Multiply';
        const Divide: Key = 'sf::Keyboard::Key::Divide';
        const Left: Key = 'sf::Keyboard::Key::Left';
        const Right: Key = 'sf::Keyboard::Key::Right';
        const Up: Key = 'sf::Keyboard::Key::Up';
        const Down: Key = 'sf::Keyboard::Key::Down';
        const Numpad0: Key = 'sf::Keyboard::Key::Numpad0';
        const Numpad1: Key = 'sf::Keyboard::Key::Numpad1';
        const Numpad2: Key = 'sf::Keyboard::Key::Numpad2';
        const Numpad3: Key = 'sf::Keyboard::Key::Numpad3';
        const Numpad4: Key = 'sf::Keyboard::Key::Numpad4';
        const Numpad5: Key = 'sf::Keyboard::Key::Numpad5';
        const Numpad6: Key = 'sf::Keyboard::Key::Numpad6';
        const Numpad7: Key = 'sf::Keyboard::Key::Numpad7';
        const Numpad8: Key = 'sf::Keyboard::Key::Numpad8';
        const Numpad9: Key = 'sf::Keyboard::Key::Numpad9';
        const F1: Key = 'sf::Keyboard::Key::F1';
        const F2: Key = 'sf::Keyboard::Key::F2';
        const F3: Key = 'sf::Keyboard::Key::F3';
        const F4: Key = 'sf::Keyboard::Key::F4';
        const F5: Key = 'sf::Keyboard::Key::F5';
        const F6: Key = 'sf::Keyboard::Key::F6';
        const F7: Key = 'sf::Keyboard::Key::F7';
        const F8: Key = 'sf::Keyboard::Key::F8';
        const F9: Key = 'sf::Keyboard::Key::F9';
        const F10: Key = 'sf::Keyboard::Key::F10';
        const F11: Key = 'sf::Keyboard::Key::F11';
        const F12: Key = 'sf::Keyboard::Key::F12';
        const F13: Key = 'sf::Keyboard::Key::F13';
        const F14: Key = 'sf::Keyboard::Key::F14';
        const F15: Key = 'sf::Keyboard::Key::F15';
        const Pause: Key = 'sf::Keyboard::Key::Pause';
    }

    type KeyEvent = 'sf::Event::KeyEvent';
    fun code: KeyEvent -> Key = '$1.code';
    fun alt: KeyEvent -> bool = '$1.alt';
    fun control: KeyEvent -> bool = '$1.control';
    fun shift: KeyEvent -> bool = '$1.shift';
    fun system: KeyEvent -> bool = '$1.system';

    type Event = 'sf::Event';
    class EventType {
        const Closed: uint = 'sf::Event::Closed';
        const Resized: uint = 'sf::Event::Resized';
        const LostFocus: uint = 'sf::Event::LostFocus';
        const GainedFocus: uint = 'sf::Event::GainedFocus';
        const TextEntered: uint = 'sf::Event::TextEntered';
        const KeyPressed: uint = 'sf::Event::KeyPressed';
        const KeyReleased: uint = 'sf::Event::KeyReleased';
        const MouseWheelMoved: uint = 'sf::Event::MouseWheelMoved';
        const MouseWheelScrolled: uint = 'sf::Event::MouseWheelScrolled';
        const MouseButtonPressed: uint = 'sf::Event::MouseButtonPressed';
        const MouseButtonReleased: uint = 'sf::Event::MouseButtonReleased';
        const MouseMoved: uint = 'sf::Event::MouseMoved';
        const MouseEntered: uint = 'sf::Event::MouseEntered';
        const MouseLeft: uint = 'sf::Event::MouseLeft';
        const JoystickButtonPressed: uint = 'sf::Event::JoystickButtonPressed';
        const JoystickButtonReleased: uint = 'sf::Event::JoystickButtonReleased';
        const JoystickMoved: uint = 'sf::Event::JoystickMoved';
        const JoystickConnected: uint = 'sf::Event::JoystickConnected';
        const JoystickDisconnected: uint = 'sf::Event::JoystickDisconnected';
        const TouchBegan: uint = 'sf::Event::TouchBegan';
        const TouchMoved: uint = 'sf::Event::TouchMoved';
        const TouchEnded: uint = 'sf::Event::TouchEnded';
        const SensorChanged: uint = 'sf::Event::SensorChanged';
        const Count: uint = 'sf::Event::Count';
    }
    fun etype: Event -> uint = '$1.type';
    fun key: Event -> KeyEvent = '$1.key';


    class Style {
        const None: uint = 'sf::Style::None';
        const Titlebar: uint = 'sf::Style::Titlebar';
        const Resize: uint = 'sf::Style::Resize';
        const Close: uint = 'sf::Style::Close';
        const Fullscreen: uint = 'sf::Style::Fullscreen';
        const Default: uint = 'sf::Style::Default';
    }


    class WindowType[T] {
        proc create: T * VideoMode * string * uint =
        '$1->create($2, static_cast<sf::String>($3), $4);';
        proc create: T * VideoMode * string =
        '$1->create($2, static_cast<sf::String>($3));';
        proc close: T = '$1->close();';
        fun isopen: T -> bool = '$1->isOpen()';

        gen poll_event: T * &Event -> bool = '$1->pollEvent(*$2)';
        gen poll_event(w: T)(e: &Event) => poll_event (w, e);

        fun position: T -> SFML_System::Vector2i = '$1->getPosition()';
        proc set_position: T * SFML_System::Vector2i =
            '$1->setPosition($2);';
        proc set_position(w: T)(v: SFML_System::Vector2i) =>
            set_position (w, v);

        fun wsize: T -> SFML_System::Vector2u = '$1->getSize()';
        proc set_size: T * SFML_System::Vector2u = '$1->setSize($2);';
        proc set_size(w: T)(v: SFML_System::Vector2u) => set_size (w, v);

        fun title: T -> string = 'static_cast<std::string>($1->getTitle())';
        proc set_title: T * string =
            '$1->setTitle(static_cast<sf::String>($2));';
        proc set_title(w: T)(s: string) => set_title (w, s);

        proc set_vertical_sync: T * bool = '$1->setVerticalSyncEnabled($2);';
        proc set_vertical_sync(w: T)(b: bool) => set_vertical_sync (w, b);
        proc set_framerate_limit: T * uint = '$1->setFramerateLimit($2);';
        proc set_framerate_limit(w: T)(l: uint) =>
            set_framerate_limit (w, l);
    }


    type Window = 'sf::Window*' requires window_hpp;
    ctor Window: VideoMode * string * uint =
        'new sf::Window($1, static_cast<sf::String>($2), $3)'
        requires finaliser 'flx_sfml_window_finaliser';
    ctor Window: VideoMode * string =
        'new sf::Window($1, static_cast<sf::String>($2))'
        requires finaliser 'flx_sfml_window_finaliser';
    instance WindowType[Window] {}
    inherit WindowType[Window];
}
